# vim: set filetype=sh :

# 1password cli helper to reuse the session across terminals
function openv() {
  local arg=$1
  local openv_sess_file=${HOME}/.openv-session
  local openv_config_dir=${HOME}/.openv-cfg-dir

  if [[ -z "$arg" || ("$arg" != "up" && "$arg" != "down" && "$arg" != "addkeys") ]]; then
    echo "usage: openv <up | down | addkeys>"
    return 1
  fi

  if [[ "$arg" == "up" ]]; then
    # OP_CONFIG_DIR: 1password cli --config location
    if [[ ! -f "$openv_sess_file" ]]; then
      echo "Initializing 1password CLI"

      # clean out any remnant directory contents
      rm -rf "${openv_config_dir}/config"
      OP_CONFIG_DIR="$openv_config_dir"
      export OP_CONFIG_DIR

      echo -n "1password email address: "
      local op_email
      read op_email

      local token=$(op account add --address my.1password.ca --email "$op_email" --signin --raw)
      echo "$token" > "$openv_sess_file"

      export OP_SESSION_my="$token"
      return 0
    fi

    local token
    { IFS= read -r token; } < "$openv_sess_file"
    export OP_CONFIG_DIR="$openv_config_dir"
    token=$(op signin --account my.1password.ca --raw --session "$token")
    echo "$token" > "$openv_sess_file"
    export OP_SESSION_my="$token"
  fi

  if [[ "$arg" == "down" ]]; then
    if [[ -f "$openv_sess_file" ]]; then
      local token
      { IFS= read -r token; } < "$openv_sess_file"
      export OP_CONFIG_DIR="$openv_config_dir"
      op signout --account my.1password.ca --session "$token" --forget
    fi

    rm -rf "${openv_config_dir}/config"
    rm -rf "$openv_sess_file"
    unset OP_SESSION_my
    unset OP_CONFIG_DIR
  fi

  if [[ "$arg" == "addkeys" ]]; then
    # OP_CONFIG_DIR: 1password cli --config location
    if [[ ! -f "$openv_sess_file" || -z "$OP_SESSION_my" ]]; then
      echo "1password session not yet established, run \"openv up\" first"
      return 1
    fi

    # reset the SSH auth sock config
    if [ -f "${HOME}/.ssh/ssh-agent-info" ]; then
      . "${HOME}/.ssh/ssh-agent-info"
      if [ -f '/.dockerenv' ]; then
        # We're inside a docker environment
        SSH_AUTH_SOCK=/ssh-agent
      fi
      export SSH_AUTH_SOCK
      export SSH_AGENT_PID
    fi
    ssh-add -D

    local keylist
    keylist=`op item list --categories SSHKey --format=json --vault="Private"`
    if [ "$?" -ne 0 ]; then
      echo "Failed to get retrieve SSH key list"
      return 1
    fi

    for sshkey in $(echo ${keylist} | jq -r -c '.[] | @base64'); do
      _val() {
        echo ${sshkey} | base64 --decode | jq -r ${1}
      }
      _id=$(_val '.id')

      local data
      data=`op item get --format=json "${_id}"`
      if [ "$?" -ne 0 ]; then
        echo "Failed to get retrieve SSH key"
        return 1
      fi

      _fingerprint=$(echo "${data}" | jq -r '.fields[] | select(.id == "fingerprint") | .value')
      _privatekey=$(echo "${data}" | jq -r '.fields[] | select(.id == "private_key") | .value')
      _publickey=$(echo "${data}" | jq -r '.fields[] | select(.id == "public_key") | .value')
      _title=$(echo "${data}" | jq -r '.title')
      echo "Adding key: ${_fingerprint}"
      rm -f "${HOME}/.ssh/${_title}.pub"
      echo "${_privatekey}" | ssh-add -
      echo "${_publickey}" > ${HOME}/.ssh/${_title}.pub
    done
  fi
}

function _openv_completion() {
  local cur prev
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -W "up down addkeys" -- ${cur}) )
  return 0
}
complete -F _openv_completion openv
